/**
 *qq服务器 
 *监听某个qq客户端连接 
 */

package com.qq.server.model;
import java.net.*;
import java.io.*;
import java.util.*;

import com.qq.common.Message;
import com.qq.common.User;


public class MyQqServer {

	final int std = 906486132;
	public static int random = 1;
	public MyQqServer()
	{
		try{
			System.out.println("服务器在监听");
			//在9999监听
			ServerSocket ss = new ServerSocket(9999);//就在本机服务器启动监听，不用ip啊
			//阻塞，等待连接
			
			while(true)
			{
				Socket s = ss.accept();
				System.out.println("服务器收到用户 ");
				
				//直接用对象流接收客户端发来的信息
				ObjectInputStream ois = new ObjectInputStream(s.getInputStream());
				System.out.println("服务器收到用户 ");
				
				Object u = ois.readObject();
				
			//	User u = (User)ois.readObject();
			/*	System.out.println("服务器收到用户 id: " + u.getId() + " 密码：" + u.getPw());
				
				if(u.getId() == "")
				{
					//用户名不存在，要注册
					Message m = new Message();
					m.setCon((std + random++) +"");
					System.out.println(m.getCon());
					ObjectOutputStream oos = new ObjectOutputStream(s.getOutputStream());
					oos.writeObject(m);
					
					
				}
				else{
				//把验证账号的结果通过信息包再发送回去
				Message m = new Message();
				ObjectOutputStream oos = new ObjectOutputStream(s.getOutputStream());
				
				if(u.getPw().equals("123"))//先随便写一个
				{
					//返回一个登陆成功的信息包
					m.setMesType("1");
					oos.writeObject(m);
					
					//单开一个线程，让该线程与客户端通信
					ConnectThread ct = new ConnectThread(s);//第二个客户端传入的是另一个socket
					ManageClientThread.addClientThread(u.getId(), ct);;
					//启动与该客户端通讯的进程
					ct.start();
					
					//并通知其他在线用户，用ConnectThread里实现
					ct.notifyThread(u.getId());
					
				}
				else{//登陆失败
					m.setMesType("2");
					oos.writeObject(m);
					//关闭连接
					s.close();
				}
			}
				}
		}	
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			
		}
	}*/

}
